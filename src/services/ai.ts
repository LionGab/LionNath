// üîí SEGURAN√áA: Chamadas de IA agora usam Edge Functions do Supabase
// API keys ficam protegidas no servidor, imposs√≠vel extrair do bundle

const SYSTEM_PROMPT = `Voc√™ √© a assistente virtual "Nossa Maternidade", inspirada na personalidade de uma influenciadora brasileira jovem e emp√°tica. Sua miss√£o √© apoiar gestantes e m√£es com linguagem casual, carinhosa e acess√≠vel.

INSTRU√á√ïES CR√çTICAS:
- Use PT-BR informal e emp√°tico (como uma amiga pr√≥xima)
- NUNCA fa√ßa diagn√≥sticos ou prescri√ß√µes m√©dicas
- SEMPRE inclua disclaimer: "üí° Lembre-se: cada gesta√ß√£o √© √∫nica. Consulte sempre seu m√©dico para d√∫vidas importantes."
- Para emerg√™ncias (sangramento, dor forte, desmaios): "üö® Procure ajuda m√©dica IMEDIATAMENTE. Ligue para o SAMU: 192"
- Use emojis moderadamente para humanizar a conversa
- Seja pr√°tica e ofere√ßa solu√ß√µes r√°pidas
- Valide com base de dados m√©dicos (OMS, SBP, SUS)
- Temperatura: 0.4 para evitar alucina√ß√µes

CONTEXTO DO USU√ÅRIO: {{CONTEXT}}`;

export interface ChatContext {
  type?: 'gestante' | 'mae' | 'tentante';
  pregnancy_week?: number;
  baby_name?: string;
  preferences?: string[];
}

/**
 * Chat com NAT-IA via Edge Function (Gemini 2.0 Flash)
 * Usa nathia-chat Edge Function do Supabase
 */
export const chatWithNATIA = async (
  message: string,
  context: ChatContext,
  userId: string
): Promise<string> => {
  try {
    const { supabase } = await import('./supabase');

    const { data, error } = await supabase.functions.invoke('nathia-chat', {
      body: {
        userId,
        message,
        context,
      },
    });

    if (error) {
      throw new Error(`Edge Function error: ${error.message}`);
    }

    if (!data?.response) {
      throw new Error('Resposta vazia da Edge Function');
    }

    return data.response;
  } catch (error: any) {
    // Re-throw para ser tratado pelo retry system
    throw new Error(`NAT-IA API error: ${error.message}`);
  }
};

/**
 * Chat com Claude via Edge Function (SEGURO - API key no servidor)
 * @deprecated Use chatWithNATIA para produ√ß√£o (Gemini √© mais r√°pido)
 */
export const chatWithAI = async (
  message: string,
  context: ChatContext,
  history: any[] = [],
  userId: string
): Promise<string> => {
  try {
    const { supabase } = await import('./supabase');

    const { data, error } = await supabase.functions.invoke('claude-chat', {
      body: {
        userId,
        message,
        context,
        history,
      },
    });

    if (error) {
      throw new Error(`Edge Function error: ${error.message}`);
    }

    if (!data?.response) {
      throw new Error('Resposta vazia da Edge Function');
    }

    return data.response;
  } catch (error: any) {
    // Re-throw para ser tratado pelo retry system
    throw new Error(`Claude API error: ${error.message}`);
  }
};

/**
 * Valida resposta de IA com GPT via Edge Function (SEGURO - API key no servidor)
 */
export const validateWithGPT = async (message: string, userId: string): Promise<boolean> => {
  try {
    const { supabase } = await import('./supabase');

    const { data, error } = await supabase.functions.invoke('openai-validate', {
      body: {
        userId,
        message,
      },
    });

    if (error) {
      console.error('Erro na valida√ß√£o GPT:', error);
      return true; // Permite resposta em caso de erro
    }

    return data?.isValid ?? true;
  } catch (error) {
    console.error('Erro na valida√ß√£o GPT:', error);
    return true; // Permite resposta em caso de erro
  }
};

/**
 * Gera plano di√°rio com GPT via Edge Function (SEGURO - API key no servidor)
 */
export const generateDailyPlan = async (context: ChatContext, userId: string): Promise<any> => {
  try {
    const { supabase } = await import('./supabase');

    const { data, error } = await supabase.functions.invoke('openai-daily-plan', {
      body: {
        userId,
        context,
      },
    });

    if (error) {
      throw error;
    }

    return data;
  } catch (error) {
    console.error('Erro ao gerar plano di√°rio:', error);
    return {
      priorities: ['üíß Beber 8 copos de √°gua', 'üìÖ Marcar consulta pr√©-natal', 'üßò Exerc√≠cios leves'],
      tip: 'Cuidar de voc√™ √© cuidar do seu beb√™! Tire um tempo para respirar hoje. üíï',
      recipe: 'Vitamina de Banana: 1 banana + 1 copo de leite + 1 colher de mel. Batido com gelo!',
    };
  }
};

/**
 * Gera imagem com DALL-E via Edge Function (SEGURO - API key no servidor)
 */
export const generateImage = async (prompt: string, userId: string): Promise<string> => {
  try {
    const { supabase } = await import('./supabase');

    const { data, error } = await supabase.functions.invoke('openai-image-gen', {
      body: {
        userId,
        prompt,
      },
    });

    if (error) {
      throw error;
    }

    return data?.imageUrl || '';
  } catch (error) {
    console.error('Erro ao gerar imagem:', error);
    return '';
  }
};

export const detectUrgency = (message: string): boolean => {
  const urgencyKeywords = [
    'sangrando', 'sangramento', 'sangue',
    'dor forte', 'muita dor', 'dor insuport√°vel',
    'desmaio', 'desmaiei',
    'febre alta',
    'convuls√£o',
    'n√£o me sinto bem',
    'emerg√™ncia',
    'urgente',
  ];

  const lowerMessage = message.toLowerCase();
  return urgencyKeywords.some(keyword => lowerMessage.includes(keyword));
};
