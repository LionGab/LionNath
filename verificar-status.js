#!/usr/bin/env node

/**
 * Script de verifica√ß√£o do status do app
 * Verifica o que est√° configurado e o que falta
 */

const fs = require('fs');
const path = require('path');

console.log('\nüîç VERIFICANDO STATUS DO APP - Nossa Maternidade\n');
console.log('=' .repeat(60));

let allGood = true;

// 1. Verificar node_modules
console.log('\n1Ô∏è‚É£  Verificando depend√™ncias...');
if (fs.existsSync(path.join(__dirname, 'node_modules'))) {
  console.log('   ‚úÖ node_modules existe (depend√™ncias instaladas)');
} else {
  console.log('   ‚ùå node_modules N√ÉO existe (rode: npm install)');
  allGood = false;
}

// 2. Verificar .env ou .env.local
console.log('\n2Ô∏è‚É£  Verificando arquivo .env ou .env.local...');
const envPath = fs.existsSync(path.join(__dirname, '.env.local')) 
  ? path.join(__dirname, '.env.local')
  : fs.existsSync(path.join(__dirname, '.env'))
    ? path.join(__dirname, '.env')
    : null;

if (envPath) {
  const envFile = path.basename(envPath);
  console.log(`   ‚úÖ Arquivo ${envFile} existe`);
  
  // Ler e verificar se est√° preenchido
  const envContent = fs.readFileSync(envPath, 'utf8');
  
  const hasSupabaseUrl = envContent.includes('EXPO_PUBLIC_SUPABASE_URL=') && 
                         !envContent.includes('EXPO_PUBLIC_SUPABASE_URL=your-');
  const hasSupabaseKey = envContent.includes('EXPO_PUBLIC_SUPABASE_ANON_KEY=') && 
                         !envContent.includes('EXPO_PUBLIC_SUPABASE_ANON_KEY=your-');
  
  if (hasSupabaseUrl && hasSupabaseKey) {
    console.log('   ‚úÖ Credenciais do Supabase configuradas');
  } else {
    console.log('   ‚ö†Ô∏è  Credenciais do Supabase N√ÉO configuradas');
    console.log('   ‚û°Ô∏è  Preencha EXPO_PUBLIC_SUPABASE_URL e EXPO_PUBLIC_SUPABASE_ANON_KEY');
    allGood = false;
  }
} else {
  console.log('   ‚ùå Arquivo .env ou .env.local N√ÉO existe');
  console.log('   ‚û°Ô∏è  Crie .env.local baseado em .env.example');
  allGood = false;
}

// 3. Verificar Schema SQL
console.log('\n3Ô∏è‚É£  Verificando Schema SQL...');
const schemaPath = path.join(__dirname, 'supabase', 'schema-nossa-maternidade-completo.sql');
if (fs.existsSync(schemaPath)) {
  const schemaSize = fs.statSync(schemaPath).size;
  console.log(`   ‚úÖ Schema SQL existe (${Math.round(schemaSize/1024)}KB)`);
  console.log('   ‚ö†Ô∏è  Verifique se j√° executou no Supabase Dashboard');
} else {
  console.log('   ‚ùå Schema SQL N√ÉO encontrado');
  allGood = false;
}

// 4. Verificar Edge Function
console.log('\n4Ô∏è‚É£  Verificando Edge Function...');
const edgeFunctionPath = path.join(__dirname, 'supabase', 'functions', 'nathia-chat', 'index.ts');
if (fs.existsSync(edgeFunctionPath)) {
  const functionSize = fs.statSync(edgeFunctionPath).size;
  console.log(`   ‚úÖ Edge Function existe (${Math.round(functionSize/1024)}KB)`);
  console.log('   ‚ö†Ô∏è  Verifique se j√° fez deploy com: supabase functions deploy nathia-chat');
} else {
  console.log('   ‚ùå Edge Function N√ÉO encontrada');
  allGood = false;
}

// 5. Verificar package.json
console.log('\n5Ô∏è‚É£  Verificando package.json...');
const packagePath = path.join(__dirname, 'package.json');
if (fs.existsSync(packagePath)) {
  const pkg = JSON.parse(fs.readFileSync(packagePath, 'utf8'));
  console.log(`   ‚úÖ Projeto: ${pkg.name} v${pkg.version}`);
  
  const criticalDeps = [
    'expo',
    '@supabase/supabase-js',
    '@react-navigation/native',
    'react-native'
  ];
  
  const missingDeps = criticalDeps.filter(dep => !pkg.dependencies[dep]);
  if (missingDeps.length === 0) {
    console.log('   ‚úÖ Todas depend√™ncias cr√≠ticas configuradas');
  } else {
    console.log(`   ‚ö†Ô∏è  Depend√™ncias faltando: ${missingDeps.join(', ')}`);
  }
} else {
  console.log('   ‚ùå package.json N√ÉO encontrado');
  allGood = false;
}

// 6. Verificar estrutura de pastas
console.log('\n6Ô∏è‚É£  Verificando estrutura de pastas...');
const criticalFolders = [
  'src',
  'src/components',
  'src/screens',
  'src/services',
  'src/navigation'
];

let allFoldersExist = true;
criticalFolders.forEach(folder => {
  if (!fs.existsSync(path.join(__dirname, folder))) {
    console.log(`   ‚ùå Pasta faltando: ${folder}`);
    allFoldersExist = false;
  }
});

if (allFoldersExist) {
  console.log('   ‚úÖ Todas pastas cr√≠ticas existem');
}

// 7. Verificar documenta√ß√£o
console.log('\n7Ô∏è‚É£  Verificando documenta√ß√£o...');
const docs = [
  'COMO-DEIXAR-APP-FUNCIONAL.md',
  'STATUS-APP.md',
  'README.md'
];

docs.forEach(doc => {
  if (fs.existsSync(path.join(__dirname, doc))) {
    console.log(`   ‚úÖ ${doc}`);
  } else {
    console.log(`   ‚ö†Ô∏è  ${doc} n√£o encontrado`);
  }
});

// Resumo final
console.log('\n' + '='.repeat(60));
console.log('\nüìä RESUMO:\n');

if (allGood) {
  console.log('‚úÖ TUDO CONFIGURADO! Voc√™ pode rodar: npm start\n');
} else {
  console.log('‚ö†Ô∏è  CONFIGURA√á√ÉO INCOMPLETA\n');
  console.log('üìñ Pr√≥ximos passos:\n');
  console.log('   1. Leia: COMO-DEIXAR-APP-FUNCIONAL.md');
  console.log('   2. Complete as etapas faltantes');
  console.log('   3. Rode este script novamente para verificar\n');
}

console.log('=' .repeat(60));
console.log('\nüí° Dica: Leia o arquivo STATUS-APP.md para ver o progresso completo\n');
